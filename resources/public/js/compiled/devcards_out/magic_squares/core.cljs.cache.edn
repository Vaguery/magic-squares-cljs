{:rename-macros {}, :renames {}, :externs {React {createElement {}}, document {getElementById {}}, ReactDOM {render {}}}, :use-macros {testing cljs.test, is cljs.test, deftest devcards.core, defcard devcards.core}, :excludes #{}, :name magic-squares.core, :imports nil, :requires {sab sablono.core, sablono.core sablono.core, gen magic-squares.generators, magic-squares.generators magic-squares.generators}, :uses nil, :defs {helpers {:protocol-inline nil, :meta {:file "/Users/bill/programming/magic-squares-cljs/src/magic_squares/core.cljs", :line 18, :column 10, :end-line 18, :end-column 17}, :name magic-squares.core/helpers, :variadic false, :file "src/magic_squares/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 18, :end-line 18, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, main {:protocol-inline nil, :meta {:file "/Users/bill/programming/magic-squares-cljs/src/magic_squares/core.cljs", :line 238, :column 7, :end-line 238, :end-column 11, :arglists (quote ([]))}, :name magic-squares.core/main, :variadic false, :file "src/magic_squares/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, semimagic-squares {:protocol-inline nil, :meta {:file "/Users/bill/programming/magic-squares-cljs/src/magic_squares/core.cljs", :line 63, :column 10, :end-line 63, :end-column 27}, :name magic-squares.core/semimagic-squares, :variadic false, :file "src/magic_squares/core.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 63, :end-line 63, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, pandiagonal-squares {:protocol-inline nil, :meta {:file "/Users/bill/programming/magic-squares-cljs/src/magic_squares/core.cljs", :line 85, :column 10, :end-line 85, :end-column 29}, :name magic-squares.core/pandiagonal-squares, :variadic false, :file "src/magic_squares/core.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 85, :end-line 85, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, diagonals {:protocol-inline nil, :meta {:file "/Users/bill/programming/magic-squares-cljs/src/magic_squares/core.cljs", :line 33, :column 10, :end-line 33, :end-column 19}, :name magic-squares.core/diagonals, :variadic false, :file "src/magic_squares/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 33, :end-line 33, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, basic-magic-squares {:protocol-inline nil, :meta {:file "/Users/bill/programming/magic-squares-cljs/src/magic_squares/core.cljs", :line 74, :column 10, :end-line 74, :end-column 29}, :name magic-squares.core/basic-magic-squares, :variadic false, :file "src/magic_squares/core.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 74, :end-line 74, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, random-swap {:protocol-inline nil, :meta {:file "/Users/bill/programming/magic-squares-cljs/src/magic_squares/core.cljs", :line 164, :column 7, :end-line 164, :end-column 18, :arglists (quote ([assignment howmany]))}, :name magic-squares.core/random-swap, :variadic false, :file "src/magic_squares/core.cljs", :end-column 18, :method-params ([assignment howmany]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 2, :fn-var true, :arglists (quote ([assignment howmany]))}, target-sum-of-assignment {:protocol-inline nil, :meta {:file "/Users/bill/programming/magic-squares-cljs/src/magic_squares/core.cljs", :line 113, :column 10, :end-line 113, :end-column 34}, :name magic-squares.core/target-sum-of-assignment, :variadic false, :file "src/magic_squares/core.cljs", :end-column 34, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 113, :end-line 113, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, tweak-assignment {:protocol-inline nil, :meta {:file "/Users/bill/programming/magic-squares-cljs/src/magic_squares/core.cljs", :line 158, :column 7, :end-line 158, :end-column 23, :arglists (quote ([nums i diff]))}, :name magic-squares.core/tweak-assignment, :variadic false, :file "src/magic_squares/core.cljs", :end-column 23, :method-params ([nums i diff]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 3, :fn-var true, :arglists (quote ([nums i diff]))}, subset-errors {:protocol-inline nil, :meta {:file "/Users/bill/programming/magic-squares-cljs/src/magic_squares/core.cljs", :line 144, :column 10, :end-line 144, :end-column 23}, :name magic-squares.core/subset-errors, :variadic false, :file "src/magic_squares/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 144, :end-line 144, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, subset-totals-of-assignment {:protocol-inline nil, :meta {:file "/Users/bill/programming/magic-squares-cljs/src/magic_squares/core.cljs", :line 100, :column 10, :end-line 100, :end-column 37}, :name magic-squares.core/subset-totals-of-assignment, :variadic false, :file "src/magic_squares/core.cljs", :end-column 37, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 100, :end-line 100, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, random {:protocol-inline nil, :meta {:file "/Users/bill/programming/magic-squares-cljs/src/magic_squares/core.cljs", :line 177, :column 10, :end-line 177, :end-column 16}, :name magic-squares.core/random, :variadic false, :file "src/magic_squares/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 177, :end-line 177, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}}, :require-macros {dc devcards.core, devcards.core devcards.core, test cljs.test, cljs.test cljs.test, sab sablono.core, sablono.core sablono.core}, :cljs.analyzer/constants {:seen #{sort-by :path :d1 best variations first gen/many-diags helpers last :d2 p1__30211# :l1 = gen/subset-errors semimagic-squares rand-int pandiagonal-squares map :testing-contexts range :target-sum-of-assignment :d6 sort gen/semimagic-square p1__30210# :scoring-card diagonals basic-magic-squares :c3 shuffle gen/total-error nine-square :d5 magic-squares.core/random magic-squares.core/subset-errors :func :ns random-swap :name repeatedly * let :file into :end-column gen/target-sum target-sum-of-assignment magic-squares.core/semimagic-squares :type five-square gen/fill-square :d4 tweak-assignment do :subset-errors :magic_squares.core :c2 > :r2 if concat magic-squares.core/basic-magic-squares :documentation :column gen/sums-of-subsets :d8 or :card println magic-squares.core/diagonals zero? :r3 p1__30209# :main-obj :fail :c1 gen/rotate-seq :line subset-errors fn* not recur :initial-data :r1 magic-squares.core magic-squares.core/subset-totals-of-assignment vals :l2 magic-squares.core/target-sum-of-assignment :expected / :subset-totals-of-assignment loop merge :end-line :d7 :random gen/diags-of-matrix :error counter :options :pass inc + gen/magic-square quote magic-squares.core/pandiagonal-squares str :arglists :d3 :helpers :actual magic-squares.core/helpers :doc :pandiagonal-squares count apply :semimagic-squares p1__30212# :test subset-totals-of-assignment random assignment :message :basic-magic-squares :heading :first-card :diagonals}, :order [:path :func :magic_squares.core :first-card :name :documentation :main-obj :initial-data :options :helpers :testing-contexts :type :expected :actual :message :error = gen/rotate-seq :pass :fail not gen/fill-square quote magic-squares.core/helpers :ns :file :end-column :column :line :end-line :arglists :doc :test magic-squares.core helpers :diagonals gen/diags-of-matrix gen/many-diags magic-squares.core/diagonals diagonals :semimagic-squares gen/semimagic-square :r1 :r2 :r3 :c1 :c2 :c3 magic-squares.core/semimagic-squares semimagic-squares :basic-magic-squares gen/magic-square merge :d1 :d2 magic-squares.core/basic-magic-squares basic-magic-squares :pandiagonal-squares :d3 :d4 :d5 :d6 :d7 :d8 magic-squares.core/pandiagonal-squares pandiagonal-squares :scoring-card :subset-totals-of-assignment gen/sums-of-subsets into range count shuffle inc * magic-squares.core/subset-totals-of-assignment subset-totals-of-assignment :target-sum-of-assignment gen/target-sum / apply + vals :l1 :l2 magic-squares.core/target-sum-of-assignment target-sum-of-assignment :subset-errors gen/subset-errors magic-squares.core/subset-errors subset-errors :random five-square assignment sort map fn* p1__30209# gen/total-error p1__30210# tweak-assignment loop best counter println str last p1__30211# nine-square if or zero? > do let variations concat repeatedly random-swap rand-int recur first sort-by p1__30212# magic-squares.core/random random :card :heading]}, :doc nil}